GIT 
--
Начало работы с git 
1) Установить git для своей операционной системы 
2) проинициализировать папку в которой храняться файлы проекта 
	1.Зайти в папку через консоль
	2.Прописать команду --> git init 
	3.После чего создасться скрытая папка .git в которой будут храниться файлы git 
3)Если мы хотим чтобы git не определял какие-то файлы или папки проекта, то их названия нужно добавить в файл .gitignore
	1.Добавляем название файлов и папок котрые мы хотим игнорировать( /название папки )
	2.И через git add добавляем наш файл в git 
	3.И коммитим наш файл
4)Каждый коммит имет свой хешкод который моеж использоваться для отката до предидущей версии 



---
Команды
1.git init ---> инициализировать папку с проэктом в git 
2.git status ---->  просматреть статус роботы git (в папке проекта) | помотреть в какой сейчас ветке находишься | и посмотреть трекаются ли вайлы из проекта   
3.git add ----> указать какие файлы нужно "отслеживать" трекать 
4.git add . -----> добавить "трекать"  сразу все файлы из папки 
5.git rm --cached ---> удалить файл из git  перестать его трекать 
6.git commit ---> записываем наши измененые файлы в репозиторий 
7.git commit -m "message" ---> тоже что и в предидущем но с сообщением "названием" коммита 
8.git branch -----> показывет ветки 
9.git branch имя ветки -----> создает новую ветку 
10.git branch -D имя ветки -----> удаляет ветку
11.git checkout имя ветки -----> переходим на другую ветку | чтобы вернуться обратно пишем тоже самое и имя ветки на которою хотим вернуться
12.git checkout -b имя ветки -----> создаем новую ветку и сразуже на нее переходим 
13.git merge -----> объединяет ветки | например нужно зайти на ветку master написать команду git merge имя ветки и ветки объединятся, после чего вторую ветку можно удалить 
14.git push -----> пушим наш код на сервер Git Hub\Lab
16.git clone -----> клонировать репозиторий себе на локальную мишину 
15.git pull -----> скачать последние версии кода из репозитория 

--
GIT PRO

Команды
1.git status -s(short) ----> выводит укороченый формат команды git status
2.git diff ----> покказывает не проиндексироыаные изминения
3.git diff --cached ----> показывает проиндексированые изминения(похоже на след. коменду)
4.git --staged ----> просмотреть изминения которые попадут в коммит(проиндексированые) 
5.git commit -a ----> автоматически добавляет все файли и добавляя их в коммит(грубо говоря пропускает git add)
	УДАЛЕНИЕ ФАЙЛОВ 
6.git rm ----> удаляет файл из робочего каталога 
7.git rm --cached ----> удаляет файл из индекса | может удалять каталоги 
8.git mv file_from file_to ----> перемещение файла 
ПРСМОТР ИСТОРИ КОММИТОВ  
9.git log ----> простмор истори коммитов(выполнять в рабочом каталоге или инициализированном) 
10.git log -p(-patch) ----> показывает разницу внесенную в каждый коммит | -some_number (например -2) ограничить количевство записей в выводе | git log -p file_name ----> просмотр истории изменений файла.

11.git log --stat ----> выводит список и количество изменненых файлов 
12.git log -S ----> показывает только те коммиты в которых были добвлены или удалены стороки
13.git log --no-merges ----> выводит все коммиты без merge коммитов 
14.git commit --amend ----> перезаписывает коммит(потипу удаляет | используеться в случае не добавления какого-то файла)
15.git reset HEAD file_name ----> отмена индексации файла 
16.git checkout -- file_name ----> отмена изменений в файле(!все локальные изменения пропадут, git заменить модифицированый файл на его последнию версию из коммита)
17.git blame file_name ----> просмотр истории того кто вносил изменения в файл 
	ПРОСМОТР УДАЛЕННЫХ РЕПОЗИТОРИЕВ 
17.git remote ----> показывает список удаленных репозиториев 
18.//origin ----> название сервера репозитория по-умолчанию
19.git remote -v ----> показывает ссылки на удаленные репозитории
20.git remote show ----> просмотр детальноъ информации о удаленных репозиториях
21.git fetch ----> стягивает все изменения с веток удаленных репозиториев но не объединяет изменения с локальными(в отличии то git push) 
22.git remote rename ----> перейменованние удаленного репозитория(git remote rename old_name new_name)
23.git remote rm\remove ----> удаление удалённого репозитория 
	МЕТКИ/ТЕГИ В GIT 
Метки в git называються ----> Тегами
!Типы тегов : Легковесные и Аннотированные!
--  
Аннотированные ----> храняться в базе данных Git как полноценные объекты(имеют контрольную сумму, содержат имя автора и e-mail, дату создания, имеют коментраии и могу быть подписаны)
--
Легковесные ----> временная метка которая не содержит доп. информации 
--
24.git tag ----> просмотр тегов 
25.git tag -l "v1.8.5*" ----> просмотр тегов по шаблону (Шаблон: "v1.8.5*")
26.git tag -a v1.1 -m "my version 1.1" ----> создание аннотированной метки с сообщением
27.git show <tagname> ----> покажет всю информацию о теге и о коммите 
28.git tag v1.1-lw ----> создание легковесной метки 
29.git push origin <tagname> ----> отправление тега на удаленный сервер
30.git push origin --tags ----> отправит сразу все теги на удаленный сервер 
31.git tag -d <tagname> ----> удаление тега локально 
32.git push origin --delete <tagname> ----> удаление тега с удаленного репозитория
	ВЕТВЛЕНИЕ В GIT
33.git log --all ----> просмотр истрии по всем веткам 
34.git log --oneline --decorate --graph --all ----> просмотр полной истории 
35.git switch ----> можно использовать вместо git checkout 
	git switch branch_name ----> переключится на ветку
	git switch -c new_branch ----> создает новою ветку и переключается на нее  
	git switch - ----> вернутся к преведущей ветке 
36.git status ----> если появиться конфликт при слиянии то с помощью этой команди можно увидеть какие файлы не объединены 
37.git marge tool ----> инструмент для просмотра конфликтов 
38.git branch -v ----> просмотр последних коммитов 
39.git branch --merget ----> просмотр вето которые уже слиты
40.git branch --no-merget ----> просмотр не слитых веток 
41.git branch --move old_branch_name new_branch_name ----> переименование ветки с сохранением истории 
42.git push --set-upstream origin new_branch_name ----> пуш ного имени ветки на удаленный сервер 
43.git push origin --delete old_name_branch ----> удаление названия страой ветки из удаленного сервера 
44.
---
	НАЗВАНИЕ ВЕТОК 
developer или next ----> так обычно называют ветки для тестирвания 
proposed или pu ----> ветка с предлагаемыми обновлениями 

Тематические ветки ----> другими словами временные ветки, создаваемые для работы над конкретной функцией или задачей 
--
Ветки слежения ----> грубо говоря, это ссылки на определенноё состояние удаленной ветки. Это локальные ветки, которые нельзя перемещать.
Ветка слежения ----> это локальные ветки, которые напрямую связаные с удалённой веткой 
Ветка за которой следит локальная называется "upstream"
--
Если у вас уже есть локальная ветка и вы хотите настроеить ее на слежение за удалённой веткой, и изменить upstream ветку то можно выполнить такую команду:
git branch - u origin/branch_name 
git branch -vv ----> просмотр того как настроены ветки слежения есть команда
git push origin --delete serverfix ----> удаление удаленной ветки  
--
	ПЕРЕБАЗИРОВАНИЕ ВЕТОК
Пребазирование ----> один из инструментов как merge, который позволяет грубо говоря мпименить изменения(или перенести их) поверх другой ветки.
git rebase 
git rebase --abort ----> отменить процес перебазирования 
git rebase --continue ----> эта команда применяеться после решения конфликтов, чтобы продолжить перебазирование
git rebase --skip ----> пропускает конфликтный коммит 
--
Кроме того что git вычисляет хеш сумму коммита, он еще вычесляет котрольную сумму отдельного патча, который входит в этот коммит эта контрольная сумма называется "patch-id"




